[{"title":"git tag","url":"%2F2019%2F09%2F01%2Fgit-tag%2F","content":"## git tag\n\ntag(標籤)是用來標記重要的commit，類似版本名稱或是版本號。\n\ngit 標籤分為**輕量標籤(lightweight tag)**和**標示標籤(annotated tag)**。\n\n<escape><!-- more --></escape>\n\n* 輕量標籤(lightweight tag)\n    * 不可變更的暫時標籤\n    * 可以添加名稱\n\n* 標示標籤(annotated tag)\n    * 可以添加打標簽者的名稱、email及日期\n    * 可以添加名稱\n    * 可以添加註解\n    * 可以添加簽名\n\n相關指令如下\n\n```\n// 查詢標籤\ngit tag\n \n// 查詢詳細標籤\ngit tag -n\n\n\n// 刪除標籤\ngit tag -d 標籤名稱\n \n// 新增輕量標籤\ngit tag 標籤名稱\n \n// 新增標示標籤\ngit tag -am \"備註內容\" 標籤名稱\n\n// 切換到標籤的commit\ngit checkout [標籤名稱]\n```\n\n","tags":["tag"],"categories":["git"]},{"title":"git 分支(branch)","url":"%2F2019%2F09%2F01%2Fgit-branch%2F","content":"\n## git branch(分支)簡介\n\nbranch的存在是為了將修改紀錄的流程分開儲存，各個分支間的修改紀錄不會互相影響，所以在Repository中可以同時進行多個不同的修改。因此就算是已經上線的網站或是服務，團隊成員還是可以建立各自的分支專注在自己負責開發的部分，等到完成了各自負責開發的部分後，待團隊成員確認沒有問題之後，再將完成開發的分支導回主要分支`master`。這樣的話，在開發過程中就不會影響到原有的網站或服務，而且過程中所有的commit歷史都會被儲存，出現bug時能更容易地找出問題所在。\n\nGit在第一次提交commit後會出現`master`分支，在這之後，如果沒有新建立其他 分支，所有commit都會儲存在主要分支`master`中。\n\n**[branch參考資料](https://backlog.com/git-tutorial/tw/stepup/stepup1_1.html)**\n\n**[分支圖解](https://nvie.com/posts/a-successful-git-branching-model/)**\n\n<escape><!-- more --></escape>\n\n## HEAD - 了解目前所在位置\n\n在git中，HEAD代表了目前分支最新的commit，但可以使用`checkout`命令來移動HEAD的指向，查看過去其他commit的內容。\n\n```\n// HEAD: 目前所在位置的指標\n\n//瀏覽目前的分支\ngit branch  \n\n// 查看該次commit內容\ngit checkout [commit亂數版本號前四碼]  \n\n// 回到master最後一次commit內容\ngit checkout master  \n```\n\n## 建立新分支\n\n\n```\n// 建立新分支\ngit branch [新分支名稱]\n\n// 切換到分支\ngit checkout [分支名稱]\n```\n{% asset_img creatBranch.png  新增feature1分支並切換 %}\n\n## 合併分支\n\n新建立的分支編輯並確認完內容之後，要進行合併分支，首先先將HEAD指向回`master`然後使用`merge`指令合併分支\n\n```\n// 將HEAD指向回master\ngit checkout master\n\n// 合併master與feature1\ngit merge [分支名稱]\n```\n{% asset_img merge.JPG  合併master 與 feature1 分支 %}\n\nbranch合併後，2個branch將會同時指向同一個commit紀錄。\n\n{% asset_img merge.png  新增feature1分支後與為新增commit的master合併 %}\n\n{% asset_img merge1.png  新增feature1分支後，master分支與feature1分支均有提交新commit後才合併 %}\n\n### 同時更新，無衝突merge\n\n新建立branch 後，在未提交commit前，兩個branch內容並沒有任何差別；而在提交了commit後才會形成所謂的分支。若新分支與master分別提交commit的內容無衝突(例如：在master中繼續編輯H1並提交commit；在feature1分支中編輯css檔案並提交commit)，可以執行上述`merge`指令即會將各自commit差異部分直接合併。\n\n\n\n### git merge 解決衝突篇\n\n在多人協作時可能發生同時有人修改到同一隻檔案的同一行程式碼，在這樣的情況下進行合併分支就會出現衝突。\n\n先在專案資料夾中新增`index.html`並提交commit，然後新增`feature1`分支，接下來切換到`feature1`分支新增`all.css`並編輯`index.html`如下圖後提交commit\n\n{% asset_img feature1_index.png  feature1分支的index.html %}\n\n接下來，切換回master分支，同樣編輯`index.html`檔案中的`<h1>`如下圖\n{% asset_img master_index.png  master分支的index.html %}\n\n接下來執行`merge`指令後會出現以下提示，要求處理衝突後再執行合併\n{% asset_img merge3.png  master衝突提示 %}\n\n在`master`分支下開啟`index.html`會發現內容顯示如下圖，會有相關標記呈現衝突的內容\n{% asset_img merge4.png  master衝突提示 %}\n\n這裡可自行判斷須留下的內容，在這個例子中我們選擇保留2個`h1`內容，移除標記後存檔\n{% asset_img merge5.JPG  修改後的index.htm內容 %}\n\n再提交一次commit，即可完成2個branch合併\n{% asset_img merge6.JPG  修改後的index.htm內容 %}\n\n","tags":["branch"],"categories":["git"]},{"title":"GitHub 基本操作","url":"%2F2019%2F09%2F01%2Fgithub-tutorial%2F","content":"\n## GitHub介紹\n\nGitHub及是一種遠端git託管服務，用來將本地數據庫(Local Repository)儲存到遠端數據庫(Remote Repository)；工程師會將開源的專案程式碼或是與他人協作的專案用遠端git的方式分享，其他的工程師也可以透過git提供相關的意見。\n我們也可以在GitHub上看到其他開發者分享到GitHub的Code，及過去修改內容的紀錄。\n\n<escape><!-- more --></escape>\n\n但要注意的是，如過是一般申請GitHub免費帳號，只能開啟Public Repository，上傳的程式碼是會被其他的開發者看到的，所以要避免上傳一些屬於商業邏輯或是一些機密的code。當然GitHub也有提供Private Repository，但會有費用產生。\n\n## 註冊GitHub帳號\n\n到[GitHub](https://github.com/)，點擊Sign up後依指令操作，第三步驟的問卷調查可跳過。\n\n另外，若是學生身分擁有edu.tw結尾的e-mail的話，可考慮申請[Student Developer Pack](https://education.github.com/pack)，學生開發包中有相當多的服務可以申請，其中包含將GitHub帳號免費升級為Micro Account；更多學生開發包的資訊可以參考[免費資源網路社群](https://free.com.tw/github-student-developer-pack/)。\n\n## 新增遠端數據庫\n\n在GitHub點選「+」→ New repository\n\n{% asset_img newRepository.png  新增Repository %}\n\n{% asset_img creatRepository.JPG  命名Repository %}\n\n完成後會有以下畫面出現\n{% asset_img QuickSetup.png GitHub設定細節 %}\n\n## 連結遠端數據庫\n\n接下來打開終端機，在本機建立一個專案資料夾`githubtest`，移動到專案資料夾下`cd githubtest`，然後貼上在上圖中複製的HTTPS url\n\n```\nmkdir githubtest\ncd githubtest\ngit clone [GitHub頁面中 https url]\n```\n因為新建立的遠端資料庫是空資料庫，所以clone完成後終端機會出現以下訊息\n\n>warning: You appear to have cloned an empty repository.\n\n在打開檔案總管查看，會發現在專案資料夾`githubtest`下，多出了`gittest`資料夾\n{% asset_img Local.JPG clone完成後本地數據庫gittest %}\n\n\n接下來，新增一個`index.html`檔案，並提交第一次的commit，然後執行`git push`指令\n{% asset_img commit_1.JPG 提交Commit %}\n\n重新整理GitHub頁面後，即可看到遠端資料庫已出現一個`index.html`檔案，並且有1個Commit。\n\n{% asset_img remote_1.JPG GitHub頁面 %}\n\n再新增一個`index2.html`，然後再執行一次commit並push到遠端資料庫；重整頁面後可以看到兩個檔案及兩次的commit，\n\n{% asset_img commit2.png GitHub頁面 %}\n\n點入commit頁面中，可以看到每次commit的內容\n{% asset_img commit3.JPG GitHub commit頁面 %}\n\n再點擊其中一個commit，即可查看該次commit變更的內容記錄\n{% asset_img commit4.JPG GitHub commit變更紀錄頁面 %}\n\n\n## 從GitHub尋找實用插件\n\n再開發過程中，遇到需要尋找插件時，直接在搜尋引擎搜尋可能會有開發者已經停止更新，或是因為瀏覽器更新太快，導致插件已經無法使用等情形。\n\n在這種時候，可以再GitHub尋找其他開發者分享的插件，在GitHub上可以看到相關插件用各種語言編寫的數量；在GitHub上會清楚呈現最後更新日期，以及有多少其他的開發者給予\"星星\"(每位開發者只能對相同的內容給予一次星星)，藉此判斷該插件是否開發者仍有在做維護以及熱門程度。\n{% asset_img search.png GitHub搜尋結果 %}\n\n是否採用插件的建議判斷準則，半年內仍有持續的commit更新，並且在相關插件中擁有最多或相對多的星星數。\n\n可至repository頁面中查看每次的commit所修改的內容，以及更新的頻率。\n\n多數的插件repository頁面中也會提供`reademe.md`文件告訴其他開發者這個插件要如何作使用。\n\n也可查看issues頁面中其他開發者已發現的Bug會問題，以及原開發者是否有回應問題解決等等。\n\n## 解決Private repository費用問題\n因為GitHub新增Private repository會有費用問題，每月US$7，如果有費用考量又希望建立Private repository可以考慮[Bitbucket](https://bitbucket.org/)提供的服務，在5人以下的開發團隊使用Private repository是免費的。\n{% asset_img Bitbucket.JPG Bitbucket收費標準 %}\n","tags":["GitHub"],"categories":["github"]},{"title":"git 指令大全","url":"%2F2019%2F08%2F31%2Fgit-command%2F","content":"\n本篇是git指令蒐集，供快速查詢用\n\n更多指令可到[連猴子都能懂得Git入門指南](https://backlog.com/git-tutorial/tw/reference/)中查詢\n\n<escape><!-- more --></escape>\n\n\n## 基礎設定\n\n```\n// 查詢版本\ngit version\n \n// 查詢設定列表\ngit config --list\n\n// 編輯git設定\ngit config -e [--global]\n \n// 輸入姓名\ngit config --global user.name \"你的名字\"\n \n// 輸入email\ngit config --global user.email \"你的email\"\n```\n\n\n## 新增本地/遠端數據庫\n\n```\n// 在本地資料夾新增數據庫\ngit init\n\n// 新建一個資料夾，並初始化為本地數據庫\ngit init [資料夾名稱]\n \n// 複製遠端數據庫\ngit clone 遠端數據庫網址\n```\n\n## 增加/刪除檔案\n\n```\n// 增加檔案進入索引\ngit add [檔案名稱]\n \n// 增加全部檔案進入索引\ngit add .\n\n// 刪除工作區檔案，並將這次的刪除加入索引中\ngit rm [檔案名稱]\n\n// 停止追蹤特定檔案，但檔案仍會保留在工作區\ngit rm --cached [檔案名稱]\n\n// 重新命名檔案，並將這次的重新命名加入索引中\ngit mv [file-original] [file-renamed]\n \n\n// 將索引提交到數據庫\ngit commit -m \"更新訊息\"\n\n// 提交索引中指定的檔案到數據庫\ngit commit [檔案名稱1] [檔案名稱2] ... -m \"更新訊息\"\n\n// 使用一次新的commit來替代上一次的commit\n// 如果檔案沒有任何的更新變化，則用來改寫上一次的commit\"更新訊息\"\ngit commit --amend -m [message]\n```\n\n## 查看訊息\n\n```\n// 查詢狀態\ngit status\n \n// 顯示歷史紀錄\ngit log\n\n// 顯示commit歷史，以及每次commit發生變更的檔案\ngit log --stat\n \n// 根據關鍵字搜索提交歷史\ngit log -S [keyword]\n\n// 顯示某個文件的版本歷史，包括重新命名\ngit log --follow [file]\nit whatchanged [file]\n```\n\n## 還原指令\n\n```\n// 還原工作目錄與索引，會跟最後一次 commit 保持一樣\ngit reset --hard \n \n// 全部檔案取消索引\ngit reset HEAD \n \n// 單一檔案取消索引\ngit reset HEAD [檔案名稱]\n \n// 恢復單一檔案到最新 commit 狀態\ngit checkout [檔案名稱] \n \n// 刪除最近一次 commit \ngit reset --hard HEAD^ \n \n// 上面語法如果刪除錯了可以再用此語法還原\ngit reset --hard ORIG_HEAD \n \n// 刪除最近一次 commit，但保留異動內容\ngit reset --soft HEAD^\n \n// commit 後發現有幾個檔案忘了加入進去，想要補內容進去時\ngit commit --amend \n```\n\n## 分支\n\n```\n// 顯示所有本地分支\ngit branch\n\n// 列出所有遠端分支\ngit branch -r\n\n// 列出所有本地分支和遠端分支\ngit branch -a\n \n// 新增分支\ngit branch [分支名稱]\n \n// 切換分支\ngit checkout [分支名稱]\n \n// 合併指定分支到目前的分支\ngit merge [分支名稱]\n \n// 刪除分支\ngit branch -d [分支名稱]\n```\n\n\n## 遠端數據庫操作\n\n```\n// 複製遠端數據庫\ngit clone 遠端數據庫網址\n \n// 查詢遠端數據庫\ngit remote\n\n// 下載遠端數據庫的所有變動\ngit fetch [remote]\n \n// 將本地分支推送到遠端分支\ngit push [遠端數據庫名稱] [遠端分支名稱]\n \n// 將遠端分支拉下來與本地分支進行合併\ngit pull [遠端數據庫名稱] [遠端分支名稱]\n\n// 推送所有分支到遠端數據庫\ngit push [remote] --all\n```\n\n## 標籤\n\n```\n// 查詢標籤\ngit tag\n \n// 查詢詳細標籤\ngit tag -n\n \n// 切換到標籤的commit\ngit checkout [標籤名稱]\n\n// 刪除標籤\ngit tag -d 標籤名稱\n \n// 新增輕量標籤\ngit tag 標籤名稱\n \n// 新增標示標籤\ngit tag -am \"備註內容\" 標籤名稱\n```\n\n## 暫存\n\n```\n// 暫時儲存當前目錄\ngit stash\n \n// 瀏覽 stash 列表\ngit stash list \n \n// 還原暫存\ngit stash pop\n \n// 清除最新暫存\ngit stash drop\n \n// 清除全部暫存\ngit stash clear\n```\n","tags":["指令大全"],"categories":["git"]},{"title":"git 基本入門","url":"%2F2019%2F08%2F31%2Fgit-begining%2F","content":"\n## 前置準備\n\n>[git 安裝網址 : https://git-scm.com/](https://git-scm.com/)\n\n>使用的終端機：  cmder\n\n檢查是否安裝完成\n```\ngit --version\n```\n<escape><!-- more --></escape>\n\n## 基本指令\n\n1. 移動路徑： `cd 路徑`\n2. 回上一層: `cd ..` (兩個.. 不是一個.)\n3. 展開列表: `ls`\n4. 開新資料夾: `mkdir 資料夾名稱`\n5. 開新檔案: `touch 檔案名稱`\n\n## 環境設定\n\n設定使用者名稱，讓git版本控制終能顯示修改人及聯絡e-mail\n\n1. 設定使用者e-mail \n\n ```\n git config --global user.email \"使用者e-mail\" \n ```\n\n\n2. 設定使用者名稱 \n\n ```\n git config --global user.name \"使用者名稱\"  \n ```\n\n\n3. 查看是否設定成功 \n\n ``` \n git config --list\n ```\n\n\n## git 基礎操作\n\n{% asset_img git.png  Git基本流程與指令 %}\n\n### 建立本地數據庫(repository)\n\n1. 新增一個專案資料夾`gitProject`\n```\n mkdir gitProject\n```\n\n2. 使用終端機`cd`指令移動到該資料夾\n```\n cd gitProject\n```\n\n3. 將專案資料夾建立成本地端數據庫\n```\n git init\n```\n\n4. 列出專案資料夾中的檔案和資料夾(-l 列出詳細資料 -a 列出隱藏資料夾)\n```\n ls -la\n```\n\n若本地數據庫建立成功，資料夾內會出現一個隱藏的`.git`資料夾；終端機顯示的資料夾路徑後方會出現`master`\n\n未來在專案資料夾中的任何修改與變動，都會以git專有的格式記錄在`.git`資料夾中，可以去查看資料夾裡面的內容，但是千萬不要去修改或刪除該資料夾或其中的內容。\n\n{% asset_img git_init.JPG  建立本地數據庫 %}\n\n### git Commit (提交)\n\n每次提交的Commit都會和前一個版本的Commit比較，所有和上一個版本不同的變更都會有紀錄。\n\n在流程中，專案資料夾新增檔案後，需先新增(add)至\"索引\"中，等確認新增的檔案都沒有問題後，就可以提交(commit)一個版本。\n\n#### git commit 會使用到的指令\n\n1. 加入索引: `git add .`\n2. 檢查狀態: `git status`\n3. 提交更新: `git commit -m \"修改紀錄\"`\n4. 查詢版本紀錄: `git log`\n\n先在專案資料夾中新增以下檔案：\n```\nindex.html\ntest.txt\ncss/all.css\n```\n\n查看尚未加入索引的檔案\n```\ngit status\n```\n\n\n接下來將檔案加入索引中(`.` 表示加入全部，也可以指定檔案名稱，只加入特定檔案)\n```\ngit add .\n```\n\n檢查是否加入成功\n```\ngit status\n```\n\n{% asset_img git_status.JPG  查看檔案是否已加入索引 %}\n\n成功加入索引的檔案會變成綠色，新增後尚未加入索引的檔案會以紅色顯示；如有未加入索引的檔案，可再執行一次`git add .`將所有檔案加入索引中，再執行`git status`查看狀態。\n\n確認索引檔案無誤後，執行已下指令提交版本\n\n```\ngit commit -m \"修改紀錄\"\n```\n\n提交後，開啟index.html，將原來的空白檔案加入`html` 標籤內容後儲存，再新增一個`index2.html`檔案；再執行`git status`會出現一筆modified紀錄，一筆Untracked紀錄。\n\n{% asset_img git_status2.JPG  查看檔案是否已加入索引 %}\n\n執行`git add .`將檔案全部加入索引後，再提交目前版本的commit，再次查詢`git log`將會看到2個版本紀錄。\n\n{% asset_img git_log.JPG  查看是否已成功加入commit %}\n\n在`git log`查詢中，可以看到每個版本的作者、作者e-mail、提交時間、變更描述等資訊，每個commit版本中也都有一個專屬的版本亂數紀錄\n\n### 使用 .gitignore來忽略檔案\n\n在使用git時會有些敏感的資料或是暫存檔是不想要或是不需要被上傳的，這時候就可以使用`.gitignore`來讓這些檔案不要進到版本控制中。先在repository資料夾中新增`.gitignore`檔案，開啟後以文字編輯器(ex. Sublime Text)開啟並編輯，\n\n1. 使用 `.gitignore`來忽略檔案\n`.gitignore`可加入要忽略的檔案名稱，忽略特定的檔案(**`.gitignore` 不能忽略自己**)。\n\n2. 忽略所有特定附檔名檔案\n`.gitignore`可使用萬用字元`*`，例如`*.html`即忽略所有的html檔案。\n\n3. 忽略兔定資料夾\n`.gitignore`也可以忽略整個資料夾，例如`css/`即整個css資料價均不需要被追蹤\n\n>**[.gitignore 大全](https://github.com/github/gitignore)**\n>提供各種程式語言在版本控制中， `.gitignore`範例，可以看到各種程式語言中不需要進入版控的內容各自有哪些\n\n\n### 工作狀態還原技巧\n\n1. 取消索引\n\n    1.1 全部檔案取消索引\n    ```\n    git reset HEAD\n    ```\n\n    1.2 單一檔案取消索引\n    ```\n    git reset HEAD 檔案名稱\n    ```\n使用取消索引，可將所有檔案或單一檔案狀態從\"Changes to be committed\"變成\"Untracked\"，使用情況為檔案已不打算提交，就可以使用取消索引功能。\n\n2. 還原檔案\n\n    2.1 恢復單一檔案到最後一次commit的狀態(應用情況為單一檔案在編輯的時後被改壞了，卻不確定是哪個部分造成的問題)\n    ```\n    git checkout 檔案名稱\n    ```\n\n    2.2 還原工作目錄與索引到最後一次commit的狀態(應用情況為編輯的多個檔案後，網站被改壞了，可直接回復到最後一次commit的狀態)\n    ```\n    git reset --hard\n    ```\n\n\n","tags":["git"],"categories":["git"]},{"title":"Wargame","url":"%2F2019%2F08%2F17%2FWargame%2F","content":"\n{% asset_img wargame.jpg  Wargame 白帽菁英萌芽計劃 %}\n\n## Wargame 白帽菁英萌芽計劃 \nISDA 20190817到中山大學舉辦\"Wargame 白帽菁英萌芽計劃 \"；參加完課程中的介紹與實際操作，對於資訊安全有更多的了解。\n <escape><!-- more --></escape>\n\n\n## APT(Advanced Persistent Threat)攻擊\n課程首先由趨勢科技講師介紹關於APT Campaign，APT攻擊有以下的特點：\n* 目標多在於資料的蒐集，而非以直接獲得金錢為目的(勒索軟體或釣魚郵件等)\n* 攻擊對象多為選擇過的特定目標\n* 因為只針對特定的目標，非廣泛在網路上發動，一般防毒軟體較難抵擋\n* 攻擊者大多會努力隱藏自己的蹤跡\n* 資料打包的行為較難被發現\n\n趨勢科技講師提到，針對APT Campaign，每個團隊會有慣用的行為模式，可藉由行為(user id命名習慣、攻擊方式、檔案的命名等等)、基礎建設(url、IP、機器租用與配置等等)及Profile(檔案命名邏輯、架構等等)三方面與其他的APT Campaign比對，以反向工程的方式找What they like? 以及 What they can do?\n\n\n## Wargame\nWargame 涉及到了滲透測試，ISDA講師瓦特提到因為滲透測試如果再一般網站上進行，會有觸犯[刑法妨害電腦使用罪](https://law.moj.gov.tw/LawClass/LawParaDeatil.aspx?pcode=C0000001&bp=53)，切勿在一般網站上進行。\n\n以下是講師提到的可以進行練習的地方\n* BUG BOUNTY\n* CAPTURE THE FLAG\n* WARGAME FOR BEGINER\n\n課程中實際練習了Game #1 Level 1 - Level 3，透過3關的練習學到了更多的資安觀念。\n\n## Google Hacking\n只要透過特定的關鍵字組合，很容易就會在網路上發現到意想不到的資料，因此在網站配置中要留意敏感的資料或目錄是否會不小心讓網站門戶大開。除非是原本就設定為開放式的資料，否則會建議關閉目錄檢視的功能。\n\n>**Google Hacking常用關鍵字**\n>* site: (搜尋特定網址)\n>* inurl: (搜尋特定連結)\n>* intext: (搜尋網頁內文字)\n>* intitle: (搜尋網頁標題)\n>* filetype: (搜尋特定檔案格式)\n>* link: (搜尋互相連結的網頁)\n>* \"index of\" (搜尋開放目錄瀏覽)\n>* cache: (顯示網頁在google中的暫存資料) \n\n**※若網站配置有`robot`.txt檔案防止搜尋引擎爬蟲爬取敏感資料，爬取範圍建議要用正面表列，避免使用Disallow反而讓有心人士知道哪些資料是敏感的資料，而更想要去查看**\n\n**※在開發中不要因為貪圖方便而將敏感資訊註記在註解中，雖然網站上不會顯示，但不代表不會被發現。**\n\n**※避免使用弱密碼或任何的預設密碼，容易被使用字典攻擊攻破**\n\n**※拿到一個檔案時可用以下網站檢測是否含有目前已知的病毒，或是被刻意更改過附檔名**\n\n[Check file type](http://checkfiletype.com/)\n\n[Virus Total](https://www.virustotal.com/)\n\n**講師有提醒要注意的是在上面這兩的網站切勿上傳私人檔案或照片，因上傳的檔案，有付費的人是可以下載的**\n\n**※開發網站千萬不要使用明文方式將使用者密碼儲存於資料庫欄位中，最好是使用雜湊密碼加鹽的方式，增加密碼的安全性**\n\n[密碼儲存要加”鹽”才夠安全](https://blogs.technet.microsoft.com/twsecurity/2014/02/10/163/)\n\n## 小結\n講師有提到為了還沒有參加過相關課程的人的權益，不要公開分享關卡的內容，所以這邊僅針對概念的部分作紀錄，這只是初階的入門課程，藉由紀錄把資安的概念留在心中，也許未來會使用到，也希望未來還有參加進階課程的機會。","tags":["白帽菁英萌芽計劃"],"categories":["Lecture"]},{"title":"Let’s Talk—《為什麼假新聞比真相更吸引人？》","url":"%2F2019%2F07%2F28%2FLet-s-talk-20190728%2F","content":"{% asset_img VU5A5886.JPG  Let’s Talk—《為什麼假新聞比真相更吸引人？》 %}\n## 108年青年好政系列 - Let's Talk \n這一系列活動由教育部青年發展署主辦，為鼓勵青年參與公共事務，7月至9月間辦理近30場「Let's Talk」，這次參加的是7/28在高雄中山大學舉辦的場次，主題是《為什麼假新聞比真相更吸引人？》以下是開頭兩位教授講座的筆記\n<escape><!-- more --></escape>\n\n## 中正大學胡元輝教授《假新聞的防制之道》\n{% asset_img VU5A5239.JPG  活動首先由中正大學胡元輝教授開場 %}\n胡教授先介紹了假訊息生態系統，以及人們為何會被這樣的生態系統吸引。\n\n> 你看過假新聞嗎？\n> 你分享過假新聞嗎？\n> 你能不能辨識出你看到的是不是假新聞嗎？\n\n胡教授並介紹了一些假新聞的案例以及關於AI擬真技術的(以下的影片和講座中胡教授播放的影片不同)\n\n看到這樣的擬真技術，令人開始懷疑自己平常看到的內容到底是真還是假呢？\n\n{% youtube _GoUKR-OhzA %}\n\n在這部影片中，華盛頓大學的使拉澤曼教授提到，任何的技術都有可能會被濫用，但如果用另一個角度來看，如果我們知道現今已經存在這樣的技術，就能使用反向工程去辨別什麼樣的影片可能是假的。\n\n### 假新聞生態系統\n{% asset_img IMG_20190728_105032.jpg  胡教授提到的假訊息的生態系統 %}\n\n在生態圈中「產製」、「傳輸」與「消費」間的影響很容易形成一個循環。\n\n在「網路與社群平台」蓬勃發展之下，閱聽人已經不再是以往只能被動接收的角色，因社群平台(FB、IG、LINE、Youtube等等)而形成閱聽眾的\"自媒體\"，閱聽眾以轉化成為生產性的消費者，再轉發分享時還會加上自己的評語及想法；\n\n所謂\"不求甚解的媒體\"是因為傳統媒體面臨人力短缺，卻需要製播大量新聞內容的情況下，原有訊息查證功能漸漸式微，逐漸變成一種\"如果這消息被證明是假的，我就不能播了\"的心態。\n\n### 那人們又為什麼會被假新聞生態系統吸引呢？\n而到底為什麼假新聞會這麼新引人呢？有[MIT研究：假新聞比真相傳播快](https://dq.yam.com/post.php?id=8944)指出假訊息被轉發的機率比真實訊息高7成，傳播速度快6倍。\n\n>胡教授提到這和人的認知缺陷有關;在心理學與傳播學中有相關的理論\n * 認知失調 (Cognitive dissonance)\n * 動機性推理 (motivated reasoning)\n * 確認偏誤 (confirmation bias)\n * 選擇性暴露 (selective exposure)\n * 框架理論 (frame)\n * 說明深度的假象 (illusion of explanatory depth)\n\n{% asset_img IMG_20190728_110809.jpg  最後胡教授總結，對於假新聞治理的長短期措施 %}\n\n## 臺灣大學林照真教授 《假新聞如何吸引眼球》\n{% asset_img VU5A5247.JPG  臺灣大學林照真教授 %}\n\n林教授提到了假新聞之所以吸引眼球，是因為假新聞沒有品質的包袱，加上人們天生喜歡八卦和腥羶色，讓架新聞為了追求點閱率用諷刺、模仿、捏造、操控、廣告和宣傳等手法，使假新聞能像病毒般的快速傳播。\n\n\n{% asset_img IMG_20190728_112950.jpg  假新聞/心理狀態 %}\n\n林教授也提到，假興文的產製者背後有獲利/意識形態兩種不同的驅力；而令讀者感到憤怒、憎恨、負面情緒的內容更容易在臉書上被分享。\n\n而當有天災發生時更容易成為假新聞的源頭，因為人們在當下會密切關心這些天災的相關訊息，容易出現舊訊息舊照片轉貼，因不同的立場加上自己的評斷，但這樣的假訊息對於救災的單位來說會是相當困擾的。\n\n\n{% asset_img IMG_20190728_113138.jpg  假新聞類型 %}\n\n假新聞的類型非為四大類\n    1 假命題： 目的在於製造言論風向\n    2 偽新聞網站： 內容農場，網站內容非平衡中立，多有特定立場，新聞多拷貝自不同來源\n    3 真圖假文傳播： 利用社群媒體，形成同溫層傳播，更加堅信假新聞\n    4 外力介入： 美國2016年的通俄門、馬其頓男孩： 台灣執政黨稱主要為中國勢力的介入，在野黨則指控執政力量的介入\n\n{% asset_img IMG_20190728_114541.jpg  認識大陸媒體 %}\n\n林教授也提到特定大陸媒體的特性與色彩，在面對新聞訊息時可先由訊息來源判斷該媒體是否有特定立場，內容是真正的新聞或是為了特定立場的宣傳。\n\n## 補充\n### 目前政府對於假新聞的措施\n目前對於媒體版面時常出現假新聞的指控，胡教授提到以目前在民主過家來說主要要遏止的是 **\"惡\"、\"假\"、\"害\"** 有關的內容，以目前出現過的案例主要是以《衛星電視廣播法》第27條、《社會秩序維護法》第63條以及《災害防救法》第41條開罰。\n\n### 內容農場\n可以藉由以下特值來判別一個網站是否為內容農場：\n    1. 不自己生產新聞\n    2. 新聞來源沒有交代\n    3. 不會有關於我們的相關介紹\n    4. 標題很聳動，讓人想要點進頁面閱讀\n    5. 利用條列式的書寫，偽裝井然有序，乍看之下好像很科學\n    6. 篇幅短又新鮮，讓觀眾的認知負荷不超。但細看內文可能有許多錯誤或不合理的地方\n\n內容農場主要的收入來源是廣告分潤與致入性行銷，近來網站有越來越精美的趨勢。\n\n### 現代公民面對假新聞五口訣\n**「忍、想、查、問、戳」**\n看到一則新的訊息時，先忍一忍，想一想有沒有哪裡奇怪，茶一下有沒有其他的資訊，問問身邊有沒有相關的專家，如果確認是假訊息，也要記得戳一下身邊的人，互相提醒這是假訊息。\n\n### 事實查核相關網站\n面對越來越多的假訊息，開始有一些民間機構網站開始作事實查核的工作，以後遇到看起來很奇怪的訊息，可以到以下網站找看看有沒有答案喔\n * [台灣事實查核中心](https://tfc-taiwan.org.tw/)\n * [食藥署闢謠專區](https://www.fda.gov.tw/TC/news.aspx?cid=5049)\n * [蘭姆酒吐司粉絲專頁](https://www.facebook.com/rumtoast)\n * [真的假的line chatbox](https://www.facebook.com/g0v.tw/posts/1367619799945969:0)\n * [Cofacts真的假的](https://hackmd.io/@UQVVbiEVQd6vvHT2bbIxog/BJPLbAKwb?type=view)\n * [MYGOPEN](https://www.mygopen.com/)\n * [新聞小幫手](https://newshelper.g0v.tw/)\n","tags":["青年好政"],"categories":["Lecture"]},{"title":"九棚 ∣ 鼻頭草原探險","url":"%2F2019%2F07%2F27%2FJioupeng%2F","content":"{% asset_img IMG_20190727_145046.jpg  開路先鋒的背影 %}\n\n## 鼻頭草原簡介\n墾管處近年開始推展生態旅遊行程，鼻頭草原是2019年3月起才對外開放的生態管制區，需事先申請才能進入，由滿州鄉九棚社區負責導覽解說，每天上、下午各開放100個名額預約，每10人成1團配1個解說員，費用1團1800元。\n\n<escape><!-- more --></escape>\n\n預約申請網址 https://reservapions.ktnp.gov.tw/application.aspx\n\n\n## 活動注意事項\n * 行程約2-2.5小時\n * 因鼻頭草原屬於墾丁國家公園內的生態管制區，不能任意採摘花草。\n * 為了維護生態保護區內野生動物免於感染各類疾病，禁止攜帶各類寵物進入保護區。\n * 為了生態保護，請將垃圾(包含果皮等)隨手帶離，避免影響生態。\n\n {% asset_img IMG_20190727_145120.jpg 太陽很大有雨傘可以帶著防曬 %}\n\n{% asset_img IMG_20190727_141230.jpg  風剪樹 %}\n\n這次的解說員是幽默的韋爸爸，途中詳細的解說各種特有的植物，與當地原住民間流傳的故事。其中有相當特別的半邊花。\n{% asset_img 00100dPORTRAIT_00100_BURST20190727140732216_COVER.jpg  2朵半邊花 %}\n\n{% asset_img 00100dPORTRAIT_00100_BURST20190727140726220_COVER.jpg  合體成功的一朵花 %}\n\n{% asset_img IMG_20190727_141432.jpg  遠望八瑤灣 %}\n\n登上鼻頭草原的制高點後，可以遠望「牡丹社事件」中琉球王國船難者的登陸點 - 八瑤灣；聽著韋爸爸再次簡單的敘述牡丹社事件的始末，對於這個在歷史課本中被簡單帶過的篇章有了更多的理解。\n\n{% asset_img IMG_20190727_152824.jpg  梯田般的緩坡 %}\n\n下山路上往後回望，是遼闊像梯田般的緩坡，風景很美，這個行程並沒有太大的難度，但需要注意防曬並適時補充水分。參加完了這個行程，可是對其他路線有興趣了起來。\n\n## 九棚社區發展協會\n[官方網站](http://9p.uukt.com.tw/)\n[粉絲專頁](https://www.facebook.com/%E6%BB%BF%E5%B7%9E%E9%84%89%E4%B9%9D%E6%A3%9A%E7%A4%BE%E5%8D%80%E7%99%BC%E5%B1%95%E5%8D%94%E6%9C%83-1411389605750132/)\n","tags":["九棚社區發展協會"],"categories":["生活"]},{"title":"Markdown","url":"%2F2019%2F07%2F26%2FMarkdown%2F","content":"\n部屬建置完Hexo部落格，接下來當然是要開始寫文章，在Hexo上發表文章要來熟悉__Markdown__的書寫方式，[GitBook中文解說](https://wastemobile.gitbooks.io/gitbook-chinese/content/format/markdown.html)裡有對於Markdown語法的說明\n\n<escape><!-- more --></escape>\n\n## 字體樣式\n\n###標題\n``` \n也可以使用下劃線的方式標記 H1 與 H2：\n\nAlt-H1\n======\n\nAlt-H2\n------\n\n# 我是 H1\n## 我是 H2\n### 我是 H3\n#### 我是 H4\n##### 我是 H5\n###### 我是 H6\n```\n\n也可以使用下劃線的方式標記 H1 與 H2：\n\nAlt-H1\n======\n\nAlt-H2\n------\n\n# 我是 H1\n## 我是 H2\n### 我是 H3\n#### 我是 H4\n##### 我是 H5\n###### 我是 H6\n\n\n\n```\n我是本文\n**我是粗體**\n*我是斜體*\n_我也是斜體_\n~我是刪除線~\n```\n\n\n\n我是本文\n**我是粗體**\n*我是斜體*\n_我也是斜體_\n~我是刪除線~\n\n## 超連結\n``` \n[我是超連結](我是URL)\n```\n[Go Top](#)\n\n## 列表\n\n下列內容參考自[Markdown Cheatsheet 中文版](https://gist.github.com/billy3321/1001749662c370887c63bb30f26c9e6e)\n（在這個例子裡，前置與後面的空白以點的方式顯示：⋅）\n``` \n1. 第一個有序列表項目\n2. 另一個項目\n⋅⋅⋅* 無序子列表 \n1. 實際數字不重要，只要它是一個數字\n⋅⋅⋅1. 有序子列表\n4. 與其他項目\n\n⋅⋅⋅要在列表項目下加入段落，只要縮進就好了。注意前面的空白行，以及前置的空白（至少要一個空白，不過我們在這裡會使用三個空白以剛好對齊原始的文字）。\n\n⋅⋅⋅要使文字段行而不會成為新的段落，你只需要在後面加上兩個空白。⋅⋅\n⋅⋅⋅注意這行已經分開了，不過還是在同樣的段落中。\n⋅⋅⋅（如果不要求後面的兩個空格，就為伴了典型的 GFM 斷行格式。）\n\n* 無序列表可以使用星號\n- 或減號\n+ 或加號\n\n```\n1. 第一個有序列表項目\n2. 另一個項目\n⋅⋅⋅* 無序子列表 \n1. 實際數字不重要，只要它是一個數字\n⋅⋅⋅1. 有序子列表\n4. 與其他項目\n\n⋅⋅⋅要在列表項目下加入段落，只要縮進就好了。注意前面的空白行，以及前置的空白（至少要一個空白，不過我們在這裡會使用三個空白以剛好對齊原始的文字）。\n\n⋅⋅⋅要使文字段行而不會成為新的段落，你只需要在後面加上兩個空白。⋅⋅\n⋅⋅⋅注意這行已經分開了，不過還是在同樣的段落中。\n⋅⋅⋅（如果不要求後面的兩個空格，就為伴了典型的 GFM 斷行格式。）\n\n* 無序列表可以使用星號\n- 或減號\n+ 或加號\n\n\n## CheckBox\nCheckBox有點像是代辦清單，其中要注意的是要使用`x`來表示勾選，它並不會主動紀錄勾選過的內容，所以使用時要確認勾選過的內容是否有增加 `x`\n\n``` \n- [x] 我已經完成\n- [ ] 我還沒完成\n```\n- [x] 我已經完成\n- [ ] 我還沒完成\n\n## 區塊\n分為小區塊和大區塊，通常用來作為相關內容或是說明的撰寫\n``` \n//小區塊語法(前後加上反引號)\n`我是一個小區塊`\n\n//大區塊語法(前面加上4個空白)\n    我是一個大區塊\n```\n`我是一個小區塊`\n\n    我是一個大區塊\n\n## 程式碼\n高亮程式碼顯示語法 （前後三個反引號 + 語言)\n\n{% asset_img code.JPG 程式碼書寫方式 %}\n\n顯示結果：\n```js\nlet i = 1;\nconst myInterval = setInterval(function() {\n    console.log(\"Here is message number \" + i);\n        i = i + 1;\n    }, 2000);\n```\n\n## 插入圖片\nHexo 有資產資料夾功能，[官方頁面](https://hexo.io/zh-tw/docs/asset-folders.html)中有說明如何開啟 `post_asset_folder`功能及使用標籤外掛\n\n``` \n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n\n```\n\n例如在資產資料夾中有一張sample.jpg圖檔，即可用以下方語法帶入圖片並加上說明\n\n``` \n{% asset_img sample.jpg 我是sample.jpg %}\n\n```\n顯示結果：\n{% asset_img sample.jpg 我是sample.jpg %}\n\n另外也可使用如圖片再圖床上，則使用下列語法連結圖片\n\n``` \n![IMG TEXT](IMG URL)\n\n```\n![Nick Young](https://i.imgur.com/Gr8dqt5.jpg)\n\n\n## 引用\nMarkdown 語法使用 > 製作引用區塊\n``` \n> 我是引用的文字\n\n```\n\n> 我是引用的文字\n\n## 水平分隔線\n``` \n第一個水平分隔線：\n\n***\n第二個水平分隔線：\n\n---\n第三個水平分隔線：\n\n___\n\n```\n\n第一個水平分隔線：\n\n***\n第二個水平分隔線：\n\n---\n第三個水平分隔線：\n\n___\n\n\n## 表格\n\n_Markdown 語法使用 | 、 - 或 : 製作表格，在黑多說明文件中都提到`:`可以讓內容在表格中對齊，但實際卻遇到顯示上的問題，這部分還需要尋找如何去解決_\n``` \nDefault    | Left       | Center     | Right\n-----------| :--------- | :--------: | ---------: \n         x |          x |          x |          x \nxxxxxxxxxx | xxxxxxxxxx | xxxxxxxxxx | xxxxxxxxxx\n\n```\nDefault    | Left       | Center     | Right\n-----------| :--------- | :--------: | ---------: \n         x |          x |          x |          x \nxxxxxxxxxx | xxxxxxxxxx | xxxxxxxxxx | xxxxxxxxxx\n\n\n## 摘要\n使用的NexT主題提共了三種摘要文章的方式\n1. 在文章中加入`<!-- more -->`手動摘要，Hexo提供的方式(可自行決定摘要內容長度)\n2. 在文章中的 front-matter 中添加 description，並提供文章摘錄\n3. 在主題配置文件中設定，預設擷取長度為150字元，可根據需要自行調整\n\n```\nauto_excerpt:\n  enable: true\n  length: 150\n```\n\n```\n---\ntitle: Markdown\ndate: 2019-07-26 14:47:47\ntags: \n    - hexo\n    - Markdown\ncategories: hexo\n---\n\n部屬建置完Hexo部落格，接下來當然是要開始寫文章，在Hexo上發表文章要來熟悉__Markdown__的書寫方式，[GitBook中文解說](https://wastemobile.gitbooks.io/gitbook-chinese/content/format/markdown.html)裡有對於Markdown語法的說明\n\n<!-- more -->\n```","tags":["Markdown"],"categories":["hexo"]},{"title":"架設Hexo + GitHub過程","url":"%2F2019%2F07%2F26%2Fhexo-tutorial%2F","content":"\n## 前言\n\n看到了一些關於Hexo + GitHub 的介紹，有了想要嘗試的念頭，參考了一些網路上分享的教學文章，花了一點時間測試，在這裡留下過程紀錄\n\n<escape><!-- more --></escape>\n\n## 開始之前\n### 使用的版本與環境\n\n``` \nnode: 10.16.0\nIDE:VsCode\n```\n\n## 安裝Hexo\n使用Terminal 指令安裝 hexo \n``` \n$ npm install hexo-cli -g\n```\n＊指令說明:透過 npm 在 全域 (-g) 下安裝 Hexo-Cli\n\n安裝成功後，輸入以下指令可查看版本\n``` \n$ hexo version\n```\n\n## 建立初始化Hexo\n\n``` \n$ hexo init projectName \n$ cd <blogName> \n$ npm install\n```\n＊指令說明:建立初始化 blog，`projectName` 可自訂部落格名稱，然後移動到剛創建的 `projectName` 資料夾裡，安裝相依套件(將 package.json 相依套件下載下來)\n\n\n## 啟動Hexo Server\n``` \n$ hexo server\n```\n到這裡就可以在本機瀏覽器看到初始化的Hexo Blog\n\n## 更換主題\n這裡更換了[NexT](https://theme-next.iissnan.com/)\n依官方頁面說明，採用`Git clone` 方式安裝NexT主題\n\n``` \n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n完成後開啟網站配置文件， 找到 `theme`，並將值更改為`next`\n``` \ntheme: next\n```\n存檔後重新啟動Hexo server就完成了主題的更換，還有更多的設定細節可以在[官方頁面](https://theme-next.iissnan.com/getting-started.html)中看到更詳細說明\n\n\n## 部落格配置檔案\n進入Blog資料夾中開啟 _config.yml 檔案，編輯以下內容\n**yaml 檔裡，”:”後一定要有一個空格**\n下面是 hexo 的預設配置，可以自修改。\n\n``` \n# Site\ntitle: /標題(會顯示在網頁標題與頁首)/\nsubtitle: /子標題(顯示在頁首)/\ndescription: /內容描述(給搜尋引擎看的)/\nauthor: /作者(顯示在頁尾)/\nlanguage: /網站預設語言(台灣:zh-tw)/\ntimezone: /時區(預設使用你電腦的時區)/\n\n# URL\nurl: /網站的網域位址/\nroot: /網站根目錄/\npermalink: /文章目錄(預設使用 YYYY\\MM\\DD\\文章名稱)/\n\n# Extensions\ntheme: /網站的佈景主題/\n       (可以到\"https://hexo.io/themes/\"下載喜歡的佈景放置到 theme 目錄裡)\n\n# Deployment\ndeploy:\n    type: /發佈型態/ 例如(git、heroku、rsync、openshift、ftpsync)\n    repository: /部署位置/ 例如(git@github.com:帳號/REPO名.git)\n    branch: /分支/ 例如(master、gh-pages)\n    message: /部署訊息/\n```\n\n## 部屬到GitHub\n###安裝插件\n部屬之前必須先安裝一個插件，因為預設 Hexo 並沒有安裝\n``` \n$ npm install hexo-deployer-git --save\n```\n### 建立GitHub Repositories\n去 [GitHub](https://github.com/) 官網登入,建立新的Repositories\n\n{% asset_img Create.JPG 建立Repositories %}\n\n在看到下面畫面時，代表Repositories建立成功\n{% asset_img QuickSetup.JPG Repositories建立成功 %}\n\n\n另外因為要上傳到 GitHub，網站設定檔_config.yml 還有 Deployment 的地方必須調整，將上方畫面中的內容填入 `repo: `中(注意冒號後面有一個空格)\n``` \ndeploy:\n  type: git\n  repo: https://github.com/mancen/mancen.github.io.git\n  branch: master\n```\n接下來到GitHub的Settings頁面中選擇一個模板，隨便選就可以\n{% asset_img GitHubPages.JPG 點選\"Choose a theme\" %}\n\n這裡只是要確定GitHub pages的URL，因為在網路上看到的教學文很多都沒有提到這部分，我在這裡卡關有點久，因為我拿到的URL和大部分教學文的規則不同，試了好幾次才發現一直拿到404的原因.....\n\n{% asset_img GitHubPages_URL.JPG 這就是部落格的URL %}\n\n### 將部落格上傳到GitHub\n上面的步驟都完成之後，在終端機輸入以下指令\n``` \n$ hexo d g\n```\n＊指令說明： d →部屬 g →生成靜態頁面\n\n## 其他指令\n### 新增文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 啟動Hexo 伺服器\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 產生靜態頁面\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部屬到GitHub\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### 刪除已生成的靜態頁面及快取檔案\n\n``` bash\n$ hexo clean\n```\n\n","tags":["GitHub"],"categories":["hexo"]}]